process GLOBAL = {

   ## setup useful services
   ##
   include "Validation/GlobalHits/data/Random.cfi"
   include "Validation/GlobalHits/data/MessageLogger.cfi"

   //service = Timing { }  
   //service = SimpleMemoryCheck { untracked int32 ignoreTotal = 1 }      

   ## Step 1 : Read In MC events
   ##
   ## read in a reference MC file
   source = PoolSource
   {
      untracked vstring fileNames = 
      {
         'file:/afs/cern.ch/cms/data/CMSSW/Validation/GlobalHits/data/MC_100p2_minbias.root'
         //'file:MC_100p2_minbias.root'
      }
      untracked int32 maxEvents = 10000
   }

   ## Step 2 : CMS Detector Simulation
   ##
   ## CMS Det.Simulation module (OscarProducer)
   ##
   ## Geometry
   ##
   ## can't use official yet as it is configuration.xml rather than 
   ## SimConfiguration (how to change?)
   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
   es_module = TrackerGeometricDetESModule {}
		
   ## Magnetic Field
   ##
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
		
   ## module g4SimHits
   include "SimG4Core/Application/data/SimG4Object.cfi" 

   ## Step 3 : Accumulation of globally transformed data
   ##
   ## module globalhits
   include "Validation/GlobalHits/data/globalhits.cff"
   replace globalhits.Verbosity = 0
   replace globalhits.Frequency = 50

   ## Step 4 : Output module
   ##
   module o1 = PoolOutputModule 
   { 
      untracked string fileName = "GlobalHits.root"
      untracked vstring outputCommands = 
      {
        "keep *_globalhits_*_*"
      }
   }

   ## Step 5: execute path
   ## Global producer needs DetSim, 
   ## can use smeared vertex, can't use mixing
   ##
   path p1 = { g4SimHits, globalhits }
   endpath outpath = { o1 }
	
}
