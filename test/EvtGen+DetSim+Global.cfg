process PROD  = {

        
    # NOTE : if one wants to run with the SiStripDigitizer,
    #        then mag.field in the OscarProducer should be
    #        turned ON; otherwise it gets (re)created by the
    #        SiStripDigitizer, which seems to corrupt at all 
    #        the edm::Event record
     

    # Step 1 : Event Generation

    # flat random E-gun, single muon
    # 
    # if you want another particle type, replace the PartID
    # (standard STDHEP numbering scheme)
    #
    # to run it along with CMS detector simulation
    # (OscarProducer) make sure to select QGSP physics
    # list, instead DummyPhysics ("Dummy" has only EM 
    # process and wont know to model interactions of
    # hadrons with matter)
    #
   source = FlatRandomEGunSource
   {
      untracked int32 maxEvents = 20
      PSet PGunParameters =
      {
         # you can request more than 1 particle
         #vint32  PartID = {211,11}
         vint32 PartID = { 13 } 
         double MinEta = -4.5
         double MaxEta = 4.5
         double MinPhi = -3.14159265358979323846 # must be in radians
         double MaxPhi =  3.14159265358979323846
         double MinE  = 9.99
         double MaxE  = 10.01
      }
      untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
   }
 
   module VtxSmeared = VertexGenerator 
   {
      string type = "IOMC/EventVertexGenerators/GaussianEventVertexGenerator"
      double MeanX = 0.
      double MeanY = 0.
      double MeanZ = 0.
      double SigmaX = 0.015
      double SigmaY = 0.015
      double SigmaZ = 53.0  // in mm (as in COBRA/OSCAR)
   }

   #Geometry
   #
   es_source = XMLIdealGeometryESSource 
   { 
      # FileInPath GeometryConfiguration = "SimG4Core/Application/test/SimConfiguration.xml"
      FileInPath GeometryConfiguration = "Geometry/CMSCommonData/data/SimConfiguration.xml"
      #the proper root node is set in the xml file
      string rootNodeName = ""
   }
   es_module = TrackerGeometricDetESModule {}
		
   #Magnetic Field
   #
   es_source magfield = XMLIdealGeometryESSource 
   {
      # FileInPath GeometryConfiguration ="SimG4Core/Application/test/FieldConfiguration.xml"
      FileInPath GeometryConfiguration ="Geometry/CMSCommonData/data/FieldConfiguration.xml"
      #the proper root node is set in the xml file
      string rootNodeName=""
   }
   es_module = VolumeBasedMagneticFieldESProducer 
   {
      double findVolumeTolerance = 0.0
      untracked bool cacheLastVolume = true
      untracked bool timerOn = false
   }
		
   # Step 2 : CMS Detector Simulation

   # CMS Det.Simulation module (OscarProducer)
   #
   module SimG4Object = OscarProducer 
   { 
      untracked int32 RunNumber = 1001
      untracked int32 G4EventManagerVerbosity = 0
      untracked int32 G4StackManagerVerbosity = 0
      untracked int32 G4TrackingManagerVerbosity = 0
      bool UseMagneticField = true
      # bool UseMagneticField = false
      bool OverrideUserStackingAction = true
      bool StoreRndmSeeds = false
      bool RestoreRndmSeeds = false
      string PhysicsTablesDirectory = "PhysicsTables"
      bool StorePhysicsTables = false
      bool RestorePhysicsTables = false
      #VPSet Watchers = {
      #	{ string type = "SimTracer"
      #	  bool verbose = true }
      #}
      PSet MagneticField =
      {
         double delta = 1.
      }
      PSet Physics =
      {
         # NOTE : if you want EM Physics only,
	 #        please select "SimG4Core/Physics/DummyPhysics" for type
	 #        and turn ON DummyEMPhysics
	 #
	 string type = "SimG4Core/Physics/QGSP"
	 bool DummyEMPhysics = false
         bool CutsPerRegion = true
	 #bool CutsPerRegion = false 
         double DefaultCutValue = 1000.  # cuts in cm, i.e. 10m
         #double DefaultCutValue = 0.1  # cuts in cm, i.e. 10m
         untracked int32 Verbosity = 0   # 1 will print cuts as they get set fdrom DD
			                 # 2 will do as 1 + will dump Geant4 table of cuts
      }
      PSet Generator = 
      {
         bool ApplyPtCuts = true
	 bool ApplyEtaCuts = true
	 bool ApplyPhiCuts = false
	 double MinPhiCut = 0.   # in degrees,
	 double MaxPhiCut = 360. # internally converted to radians, (-pi,pi) range accounted for
	 double MinEtaCut = -4.5
	 double MaxEtaCut = 4.5
	 double MinPtCut = 40.
	 double MaxPtCut = 999999.
	 untracked int32 Verbosity = 0
      }

      PSet RunAction = { string StopFile = "StopRun" }
      PSet EventAction =
      {
         bool CollapsePrimaryVertices = false
	 string StopFile = "StopRun"
	 untracked bool debug = false
      }
      PSet TrackingAction = 
      { 
         untracked bool DetailedTiming = false 
      }
      PSet SteppingAction =
      {
         bool   KillBeamPipe = true
	 double CriticalEnergyForVacuum = 2.0
	 double CriticalDensity = 1.e-25
	 untracked int32  Verbosity = 0
      }
      PSet TrackerSD =
      {
	 bool    ZeroEnergyLoss = false
	 bool	 NeverAccumulate = false
	 bool	 PrintHits = false
	 double  ElectronicSigmaInNanoSeconds = 12.06         
	 double  EnergyThresholdForPersistencyInGeV = 0.5
	 double  EnergyThresholdForHistoryInGeV = 0.05
      }
      PSet MuonSD =
      {
         double  EnergyThresholdForPersistency = 1.0
         bool    AllMuonsPersistent = false
         bool    PrintHits = false
      }

      PSet CaloSD = {
         double EminTrack = 1.0
         int32  CheckHits = 25
         bool   UseMap = true
         #int32  Verbosity = 1
         int32 Verbosity = 0
         bool   DetailedTiming = false
      }
      PSet ECalSD = {
         bool   UseBirkLaw = false
         double BirkC1 = 0.013
         double BirkC2 = 9.6e-6
         #int32  Verbosity = 11
         int32 Verbosity = 0
      }
      PSet HCalSD = {
         bool   UseBirkLaw = false
         double BirkC1 = 0.013
         double BirkC2 = 9.6e-6
         #int32  Verbosity = 111
         int32 Verbosity = 0
         bool   UseShowerLibrary = true
         bool   TestNumberingScheme = false
      }
      PSet CaloTrkProcessing = {
         #int32  Verbosity = 1
         int32 Verbosity = 0
         bool   TestBeam  = false
         double EminTrack = 0.01
      }                     
      PSet HFShower =    {
         #int32  Verbosity = 11
         int32 Verbosity = 0
         double ProbMax   = 0.7268
         double CFibre    = 0.50
      }
      PSet HFShowerLibrary = {
         FileInPath FileName = "SimG4CMS/Calo/data/hfshowerlibrary_lhep.root"
         string TreeEMID  = "h3"
         string TreeHadID = "h8"
      }
      PSet HFCherenkov = {
         #int32  Verbosity       = 1
	 int32 Verbosity = 0
         double RefIndex        = 1.459
         double Lambda1         = 280.0
         double Lambda2         = 700.0
         double Aperture        = 0.33
         double ApertureTrapped = 0.22
         double Gain            = 0.33
         bool   CheckSurvive    = false
      }
   }  # end of OscarProducer's PSet's/block


   # Step 3 : Digitization of the simulated hits
   
   # Step 3a : Digitization of the Tracker 
   
   # required for Pixel and SiStrip Digitizers
   #
   es_module = TrackerDigiGeometryESModule {}

   # Pixel's digitization
   #
   module pixdigi =  SiPixelDigitizer 
   {
      string SimProducer = "SimDigitizer"	      
      untracked int32 VerbosityLevel = 0		 
   }

   module stripdigi =  SiStripDigitizer 
   {
      string SimProducer = "SimDigitizer"	
      bool APVpeakmode = false
      #
      bool NoNoise = false     # NOTE : turning Noise ON/OFF will make a big change
      # bool NoNoise = true    #        on the size of SiStrip digis container !
      #
      bool LandauFluctuations = true
      int32 chargeDivisionsPerStrip = 10
      double DepletionVoltage = 140.
      double AppliedVoltage = 150.
      double ChargeMobility = 480.
      double Temperature = 297.
      bool noDiffusion = false
      double ChargeDistributionRMS = 6.5e-10
      double GevPerElectron = 3.61e-09

      double ElectronPerAdc = 313.0 
      double EquivalentNoiseCharge300um = 2160.
      double AdcThreshold = 2.
      untracked int32 AdcFullScale = 255
      double ThresholdInNoiseUnits = 5.
      double TanLorentzAnglePerTesla =0.106
      int32 AddStripInefficiency = 0
      bool AddNoise = true
      bool AddNoisyStrips = true
      double DeltaProductionCut= 0.120425 
      bool FluctuateCharge = true
      int32 addStripInefficiency = 0
      double StripEff = -1.0
      double StripChipEff = -1.0	   
      bool MissCalibrate = false
      double GainSmearing = 0.0
      double OffsetSmearing = 0.0
      int32 StripAPV = 128
      
      int32 FedAlgorithm = 4
      double FedLowThreshold = 2.
      double FedHighThreshold = 5.
      
      untracked int32 VerbosityLevel = 0		 
   }

   # Step 3b : Digitization of Ecal and Hcal 
   
   # required for Ecal and Hcal Digitizers
   # NOTE : Both Ecal and Hcal geometries need to be present,
   #        even if only one digitizers is to run
   #
   es_module = EcalPreshowerGeometryEP {}
   es_module = EcalBarrelGeometryEP {}
   es_module = EcalEndcapGeometryEP {}
   es_module = HcalHardcodeGeometryEP {}
   es_module = CaloTowerHardcodeGeometryEP {}
   es_module = CaloGeometryBuilder {}

   module ecaldigi = EcalDigiProducer {}

   module hcaldigi = HcalDigiProducer 
   {
      untracked bool doNoise = false
   } 
   
   es_module = HcalDbProducer {}
   es_source es_hardcode = HcalHardcodeCalibrations 
   {
      untracked vstring toGet = 
      {
         "Pedestals", "PedestalWidths", 
	 "Gains", "GainWidths", 
	 "QIEShape", "QIEData", 
	 "ChannelQuality", "ElectronicsMap"
      }
   }

   # Step 3c : Muon Digitization

   # As of Feb.8, 2006 CSC digi's only
   
   # modelling flags (for completeness - internal defaults are already sane)
   # BUT FOR NOW TURN OFF REAL WIRE GEOM, TO COMPARE WITH ORCA
   es_module = CSCGeometryESModule
   {
      bool useRadialStrips       = true
      bool useRealWireGeometry   = false
      bool useGangedStripsInME1a = true
      bool useOnlyWiresInME1a    = false
   }

   module muoncscdigi = CSCDigiProducer {}

   # Muon DT digi's
   
   es_module = DTGeometryESModule{}
 
   module muondtdigi = DTDigitizer 
   {
 
      bool onlyMuHits = false
      bool interpolate = true
      untracked bool debug = false
   
      # Velocity of signal propagation along the wire (cm/ns)
      # For the default value
      # cfr. CMS-IN 2000-021:   (2.56+-0.17)x1e8 m/s
      #      CMS NOTE 2003-17:  (0.244)  m/ns
      #
      double vPropWire = 24.4
 
      # Dead time for signals on the same wire (number from M. Pegoraro)
      #
      double deadTime = 150
   
      # further configurable smearing
      #
      double Smearing = 3.
 
      # The Synchronization Algo Name. Algos Type= [DTDigiSyncTOFCorr,DTDigiSyncFromTable]
      #
      string SyncName = 'DTDigiSyncTOFCorr'
      #
      # Its parameters
      #
      PSet pset = {
         double offset = 500
         int32 TOFCorrection = 2
      }
   }   
   
   # Mixing Module is *required* to simulated Ecal/Hcal/Muon digitization !

   module mix = MixingModule 
   {
      secsource input = PoolRASource  
      {
	 # 
	 # some file name should be here, otherwise PoolRASource will crash
	 #
	 # if you don't want to model the pileup, set averageNumber=0
	 #
	 # you can give just 1 file or more; 
	 # this files will make a "concatinated buffer", which will go circular
	 # until the loop of primary events is done - thus, it'll never run out
	 #
	 # WARNING: you can only give miltiple files, if they're generated with
	 #          identical sets of tracked parameters; 
	 #          for example, you canNOT give a file made with a single muon
	 #          gun and a file made with a single pion gun, because PartID
	 #          is a *tracked* parameter in the gun's PSet;
	 #          however, you can merge together files made with other generators,
	 #          for example, PythiaSource, because all parameters of it would be
	 #          *untracked*
	 #
	 untracked vstring fileNames = {'/afs/cern.ch/cms/geant4rep/genntpl/muon_simhit_for_pileup.root' }
         string type = "poisson"
         double averageNumber = 3  # setting this param. to 0 means "No pile-up", 
	                           # that is, digitize current crossing only
         int32 minBunch = -3
         int32 maxBunch = 5
         int32 seed = 1234567
      }
      int32 bunchspace = 25
   }

   # Step 4 : Output module
   #
   module o1 = PoolOutputModule 
   { 
      untracked string fileName = "GlobalValProducer.root" 
   }
   
   # Step 5 : setup GlobalProducer
   es_module = RPCGeometryESModule {}
   module gvp = GlobalValProducer
   {
      untracked string Name = "GlobalValProducer"
      untracked int32 Verbosity = 3  # verbosity inclusive. 0 provides no output
                                     # 1 provides basic output
                                     # 2 provides output of the fill step
                                     # 3 provides output of the store step
      string Label = "GlobalStats"
      PSet ProvenanceLookup =
      {
         untracked bool GetAllProvenances = false
         untracked bool PrintProvenanceInfo = false
      }
   }

   # Setup output text
   service = MessageLogger
   {
       vstring destinations =
       {
          "MessageLogger.log",
          "cout"
       }
       PSet MessageLogger.log =
       {
          int32 lineLength = 132
          bool noLineBreaks = true
       }
       PSet cout =
       {
          int32 lineLength = 132
          bool noLineBreaks = true
       }
   }

   # setup timing and memory usage output
   service = Timing {}
   service = SimpleMemoryCheck
   {
      untracked int32 ignoreTotal = 1 # default is one
   }
   
   # Now order modules execution
   # Global producer only nees DetSim for now
   sequence trDigi = { pixdigi & stripdigi }
   sequence calDigi = { ecaldigi & hcaldigi }
   sequence muonDigi = { muoncscdigi & muondtdigi }
   sequence doDigi = { trDigi & calDigi & muonDigi  }
   #path p1 = { VtxSmeared, SimG4Object, gvp }
   path p1 = { SimG4Object, gvp }
   endpath outpath = { o1 }
		
}